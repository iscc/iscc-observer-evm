[tool.poetry]
name = "iscc-observer-evm"
version = "0.2.2"
description = "ISCC Decentralized Content Registry - Observer Service for EVM based Blockchains."
authors = ["Titusz <tp@py7.de>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://iscc.codes"
repository = "https://github.com/iscc/iscc-observer-evm"
keywords=["iscc", "identifier", "media", "content", "decentralized", "registry", "observer"]


[tool.poetry.dependencies]
python = ">3.7.0,<3.7.1 || >3.7.1,<4.0"
web3 = "^5.29.0"
cython = "*"
iscc-core = "^0.2.8"
click = "^8.1.3"
sentry-sdk = "^1.5.11"


[tool.poetry.dev-dependencies]
pytest = "*"
black = "*"
poethepoet = "*"
datamodel-code-generator = {extras = ["http"], version = "^0.13.3"}

[tool.poetry.scripts]
iscc-observer-evm = 'iscc_observer_evm.__main__:main'

[tool.black]
skip-string-normalization = false
line-length = 100
target-version = ['py37']

[tool.datamodel-codegen]
url = "https://testnet.iscc.id/api/v1/openapi.json"
output = "iscc_observer_evm/models.py"
encoding = "UTF-8"
preview = true
disable_timestamp = true
user_schema_description = true
openapi_scopes = ["schemas", "paths"]
reuse_model = true
disable_appending_item_suffix = true
field_constraints = true
input-file-type = "openapi"
target-python-version = "3.7"

[tool.pytest.ini_options]


[tool.poe.tasks]
codegen = { cmd = "datamodel-codegen", help = "Generate code from openapi schema"}
format = { cmd = "poetry run black .", help = "Code style formating with black" }
lf = { cmd = "poetry run python -m tools.lf", help = "Convert line endings to lf"}
test = { cmd = "poetry run pytest", help = "Run tests with coverage" }
all = ["format", "lf", "test"]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
